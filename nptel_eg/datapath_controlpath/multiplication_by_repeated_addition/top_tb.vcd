$date
	Tue Nov 10 19:39:49 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top_tb $end
$var wire 1 ! done $end
$var reg 1 " clk $end
$var reg 16 # data_in [15:0] $end
$var reg 1 $ start $end
$scope module t0 $end
$var wire 1 " clk $end
$var wire 16 % data_in [15:0] $end
$var wire 1 $ start $end
$var wire 1 & eqz $end
$var wire 1 ! done $end
$var wire 1 ' decB $end
$var wire 1 ( clrP $end
$var wire 1 ) LdP $end
$var wire 1 * LdB $end
$var wire 1 + LdA $end
$scope module CON $end
$var wire 1 " clk $end
$var wire 1 $ start $end
$var wire 1 & eqz $end
$var reg 1 + LdA $end
$var reg 1 * LdB $end
$var reg 1 ) LdP $end
$var reg 1 ( clrP $end
$var reg 1 ' decB $end
$var reg 1 ! done $end
$var reg 3 , state [2:0] $end
$upscope $end
$scope module DAT $end
$var wire 16 - Bus [15:0] $end
$var wire 1 + LdA $end
$var wire 1 * LdB $end
$var wire 1 ) LdP $end
$var wire 1 " clk $end
$var wire 1 ( clrP $end
$var wire 16 . data_in [15:0] $end
$var wire 1 ' decB $end
$var wire 1 & eqz $end
$var wire 16 / Z [15:0] $end
$var wire 16 0 Y [15:0] $end
$var wire 16 1 X [15:0] $end
$var wire 16 2 Bout [15:0] $end
$scope module A $end
$var wire 1 " clk $end
$var wire 16 3 din [15:0] $end
$var wire 1 + ld $end
$var reg 16 4 dout [15:0] $end
$upscope $end
$scope module AD $end
$var wire 16 5 in1 [15:0] $end
$var wire 16 6 in2 [15:0] $end
$var reg 16 7 out [15:0] $end
$upscope $end
$scope module B $end
$var wire 1 " clk $end
$var wire 1 ' dec $end
$var wire 16 8 din [15:0] $end
$var wire 1 * ld $end
$var reg 16 9 dout [15:0] $end
$upscope $end
$scope module COMP $end
$var wire 16 : data [15:0] $end
$var wire 1 & eqz $end
$upscope $end
$scope module P $end
$var wire 1 " clk $end
$var wire 1 ( clr $end
$var wire 16 ; din [15:0] $end
$var wire 1 ) ld $end
$var reg 16 < dout [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx <
bx ;
bx :
bx 9
b10001 8
bx 7
bx 6
bx 5
bx 4
b10001 3
bx 2
bx 1
bx 0
bx /
b10001 .
b10001 -
bx ,
x+
x*
x)
x(
x'
x&
b10001 %
x$
b10001 #
0"
x!
$end
#3000
1$
#5000
0+
0*
0)
0(
0'
0!
b0 ,
1"
#10000
0"
#15000
1+
b1 ,
1"
#20000
0"
#25000
0+
1*
1(
b10 ,
b10001 1
b10001 4
b10001 5
1"
#26000
b101 -
b101 3
b101 8
b101 #
b101 %
b101 .
#30000
0"
#35000
0*
1)
0(
1'
b10001 /
b10001 7
b10001 ;
0&
b101 2
b101 9
b101 :
b0 0
b0 6
b0 <
b11 ,
1"
#40000
0"
#45000
b100010 /
b100010 7
b100010 ;
b10001 0
b10001 6
b10001 <
b100 2
b100 9
b100 :
1"
#50000
0"
#55000
b110011 /
b110011 7
b110011 ;
b11 2
b11 9
b11 :
b100010 0
b100010 6
b100010 <
1"
#60000
0"
#65000
b1000100 /
b1000100 7
b1000100 ;
b110011 0
b110011 6
b110011 <
b10 2
b10 9
b10 :
1"
#70000
0"
#75000
b1010101 /
b1010101 7
b1010101 ;
b1 2
b1 9
b1 :
b1000100 0
b1000100 6
b1000100 <
1"
#80000
0"
#85000
b1100110 /
b1100110 7
b1100110 ;
b1010101 0
b1010101 6
b1010101 <
1&
b0 2
b0 9
b0 :
1"
#90000
0"
#95000
0)
0'
1!
b1110111 /
b1110111 7
b1110111 ;
0&
b1111111111111111 2
b1111111111111111 9
b1111111111111111 :
b1100110 0
b1100110 6
b1100110 <
b100 ,
1"
#100000
0"
#105000
1"
#110000
0"
#115000
1"
#120000
0"
#125000
1"
#126000
