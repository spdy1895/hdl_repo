$date
	Wed Nov 11 18:07:24 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top_tb $end
$var wire 1 ! done $end
$var wire 16 " MUL_output [15:0] $end
$var reg 1 # clk $end
$var reg 16 $ data_in [15:0] $end
$var reg 1 % start $end
$scope module t0 $end
$var wire 1 # clk $end
$var wire 16 & data_in [15:0] $end
$var wire 1 % start $end
$var wire 1 ' eqz $end
$var wire 1 ! done $end
$var wire 1 ( decB $end
$var wire 1 ) clrP $end
$var wire 16 * MUL_output [15:0] $end
$var wire 1 + LdP $end
$var wire 1 , LdB $end
$var wire 1 - LdA $end
$scope module CON $end
$var wire 1 # clk $end
$var wire 1 % start $end
$var wire 1 ' eqz $end
$var reg 1 - LdA $end
$var reg 1 , LdB $end
$var reg 1 + LdP $end
$var reg 1 ) clrP $end
$var reg 1 ( decB $end
$var reg 1 ! done $end
$var reg 3 . state [2:0] $end
$upscope $end
$scope module DAT $end
$var wire 16 / Bus [15:0] $end
$var wire 1 - LdA $end
$var wire 1 , LdB $end
$var wire 1 + LdP $end
$var wire 16 0 MUL_output [15:0] $end
$var wire 1 # clk $end
$var wire 1 ) clrP $end
$var wire 16 1 data_in [15:0] $end
$var wire 1 ( decB $end
$var wire 1 ' eqz $end
$var wire 16 2 Z [15:0] $end
$var wire 16 3 Y [15:0] $end
$var wire 16 4 X [15:0] $end
$var wire 16 5 Bout [15:0] $end
$scope module A $end
$var wire 1 # clk $end
$var wire 16 6 din [15:0] $end
$var wire 1 - ld $end
$var reg 16 7 dout [15:0] $end
$upscope $end
$scope module AD $end
$var wire 16 8 in1 [15:0] $end
$var wire 16 9 in2 [15:0] $end
$var reg 16 : out [15:0] $end
$upscope $end
$scope module B $end
$var wire 1 # clk $end
$var wire 1 ( dec $end
$var wire 16 ; din [15:0] $end
$var wire 1 , ld $end
$var wire 16 < dout [15:0] $end
$var integer 32 = count [31:0] $end
$upscope $end
$scope module COMP $end
$var wire 16 > data [15:0] $end
$var wire 1 ' eqz $end
$upscope $end
$scope module P $end
$var wire 1 # clk $end
$var wire 1 ) clr $end
$var wire 16 ? din [15:0] $end
$var wire 1 + ld $end
$var reg 16 @ dout [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx @
bx ?
bx >
bx =
bx <
b10001 ;
bx :
bx 9
bx 8
bx 7
b10001 6
bx 5
bx 4
bx 3
bx 2
b10001 1
bx 0
b10001 /
bx .
x-
x,
x+
bx *
x)
x(
x'
b10001 &
x%
b10001 $
0#
bx "
x!
$end
#3000
1%
#5000
0-
0,
0+
0)
0(
0!
b0 .
1#
#10000
0#
#15000
1-
b1 .
1#
#20000
0#
#25000
0-
1,
1)
b10 .
b10001 4
b10001 7
b10001 8
1#
#26000
b101 /
b101 6
b101 ;
b101 $
b101 &
b101 1
#30000
0#
#35000
0,
1+
0)
1(
0'
b101 5
b101 <
b101 >
b10001 2
b10001 :
b10001 ?
b101 =
b0 "
b0 *
b0 0
b0 3
b0 9
b0 @
b11 .
1#
#40000
0#
#45000
b100010 2
b100010 :
b100010 ?
b100 5
b100 <
b100 >
b10001 "
b10001 *
b10001 0
b10001 3
b10001 9
b10001 @
b100 =
1#
#50000
0#
#55000
b11 5
b11 <
b11 >
b110011 2
b110011 :
b110011 ?
b11 =
b100010 "
b100010 *
b100010 0
b100010 3
b100010 9
b100010 @
1#
#60000
0#
#65000
b1000100 2
b1000100 :
b1000100 ?
b10 5
b10 <
b10 >
b110011 "
b110011 *
b110011 0
b110011 3
b110011 9
b110011 @
b10 =
1#
#70000
0#
#75000
1'
b1 5
b1 <
b1 >
b1010101 2
b1010101 :
b1010101 ?
b1 =
b1000100 "
b1000100 *
b1000100 0
b1000100 3
b1000100 9
b1000100 @
1#
#80000
0#
#85000
0+
0(
1!
b1100110 2
b1100110 :
b1100110 ?
0'
b0 5
b0 <
b0 >
b100 .
b1010101 "
b1010101 *
b1010101 0
b1010101 3
b1010101 9
b1010101 @
b0 =
1#
#90000
0#
#95000
1#
#100000
0#
#105000
1#
#110000
0#
#115000
1#
#120000
0#
#125000
1#
#126000
